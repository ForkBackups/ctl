===== README ======
Thanks for downloading The Computational Topology library!

This C++11 library provides a set of generic tools for:
	1) Generating point sets (coming soon)
	2) Building Graphs (coming soon)
	3) Building Cellular Complexes (coming soon)
	4) Computing [persistent] homology over finite fields
	5) Parallel/Distributed algorithm(s) for (4) (coming soon)

=== LICENSE ===
CTL is GPLv2+ (or later at your discretion). See LICENSE for more info. 

=== DEPENDENCIES ==
C++11 compiler (clang or gcc)
Boost
Intel's TBB
METIS (graph partitioning)
ANN (in the next release)

=== BUILDING ====
To build the library type:
	cmake .
Then assuming no errors occur:
	make

For OS/X Users:  
----
If you plan on using the default compiler (clang)
then when installing boost ensure that you use:
	brew install boost ---build-from-source --with-c++11 --with-mpi --with-program_options --with-clang --without-single
and after `cmake .` ensure that the compiler chosen is clang via `ccmake .` /usr/bin/c++ 
is a good choice.

Since libstdc++ (GNU C++ STL) and libc++ (Clang C++ STL) are not ABI compatible
one needs to take care to use the correct compilers for libraries linked against.
if boost is compiled with gcc, you cannot use clang to compile CTL and vice versa.


=== INSTALL === 
Fedora/CentOS/RHEL:

yum install ctl (coming soon)

Ubuntu:
apt-get install ctl (coming soon)

OS/X
brew install ctl (coming soon)

=== INSTALL (from source) ===

	make install
then move the contents of :
/bin ---> /usr/local/bin (or appropriate other location)
/include/ctl ----> /usr/local/include/ctl
/doc -->  /usr/share/doc/ctl

There are no shared libraries!

==== USING (coming soon) ====
See /usr/share/doc/examples for a number of examples of using the library. (coming soon)
See tutorial/ for a tutorial (coming soon)

==== SUBMITTING PATCHES ====
Please Do! 
We have not yet developed a formal method for handling such requests.

I ask that you follow the generic programming paradigm. 

See examples/ for template headers, and 
study the existing code for examples of what we consider good style.

Email ctal@appliedtopology.org if there are any questions on this.

Necessary, but not sufficient conditions for patch acceptance:
1) Your code compiles.
2) Your code is meets a style format similar to the rest of the library
3) You have tested and optimized your code.
4) Other library maintainers accept the code.
5) Any new dependencies are reasonable and you have taken the 
   necessary steps to ensure that the user experience will not be 
   affected.

=== BECOMING A MAINTAINER ===
First show some interest in the project, and submit some patches.
Once you have made some contribution then you can be accepted
as a maintainer.

In the future we hope to add support for:
	0) [Persistent] Co-homology
	1) Zig Zag Persistence
	2) Multidimensional Persistence
	3) Multidimensional Zig-Zag Persistence
	4) Tidy Sets
	5) Persistent Landscapes
	6) OpenGL Visualizations
	7) Bindings to other languages such as Python, MATLAB, and R

Please email: ctal@appliedtopology.org if you have any questions on 
using the library.
